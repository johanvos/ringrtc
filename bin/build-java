#!/bin/sh

#
# Copyright 2019-2021 Signal Messenger, LLC
# SPDX-License-Identifier: AGPL-3.0-only
#

set -e

# shellcheck source=bin/env.sh
. "$(dirname "$0")"/env.sh

JEXTRACT=${JEXTRACT:-/opt/jextract-22}
JDK=${JDK:-/opt/jdk-22}
TARGET_ARCH=${TARGET_ARCH:-x64}

# darwin only
DEFAULT_MACOS_SDK_VERSION="12.3"
MACOS_SDK_VERSION=${MACOS_SDK_VERSION:-$DEFAULT_MACOS_SDK_VERSION}
MACOS_SDK_PATH="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX${MACOS_SDK_VERSION}.sdk"

usage()
{
    echo 'usage: build-java [-d|-r|-c]
    where:
        -r to create a release build
        -d to create a debug build (which may fail to build!)
        -c to clean the build artifacts'
}

clean()
{
    # Remove all possible artifact directories.
    rm -rf ./src/rust/target/debug
    rm -rf ./src/rust/target/release
    rm -rf ./src/webrtc/src/out/debug
    rm -rf ./src/webrtc/src/out/release
    mvn -f ./src/java/tring clean
}

BUILD_TYPE=release

while [ "$1" != "" ]; do
    case $1 in
        -d | --debug )
            BUILD_TYPE=debug
            ;;
        -r | --release )
            BUILD_TYPE=release
            ;;
        --webrtc-only )
            BUILD_WHAT=webrtc
            ;;
        --ringrtc-only )
            BUILD_WHAT=ringrtc
            ;;
        --archive-webrtc )
            ARCHIVE_WEBRTC=yes
            ;;
        -c | --clean )
            clean
            exit
            ;;
        -h | --help )
            usage
            exit
            ;;
        * )
            usage
            exit 1
    esac
    shift
done

case "$TARGET_ARCH" in
    "x64")
        GN_ARCH=x64
        CARGO_ARCH=x86_64
        ;;
    "ia32")
        GN_ARCH=x86
        CARGO_ARCH=i686
        ;;
    "arm64")
        GN_ARCH=arm64
        CARGO_ARCH=aarch64
        ;;
    *)
        echo "Unsupported architecture"
        exit 1
        ;;
esac

hash rustup 2>/dev/null || { echo >&2 "Make sure you have rustup installed and properly configured! Aborting."; exit 1; }

RUSTFLAGS_WIN=

case "$(rustup show active-toolchain)" in 
    *"x86_64-apple-darwin"* | *"aarch64-apple-darwin"* )
        DEFAULT_PLATFORM="darwin"
        CARGO_TARGET="${CARGO_ARCH}-apple-darwin"
        ;;
    *"x86_64-pc-windows"* )
        DEFAULT_PLATFORM="win32"
        CARGO_TARGET="${CARGO_ARCH}-pc-windows-msvc"
        # Static linking to prevent build errors on Windows ia32
        RUSTFLAGS_WIN="-C target-feature=+crt-static"
        ;;
    *"x86_64-unknown-linux"* )
        DEFAULT_PLATFORM="linux"
        CARGO_TARGET="${CARGO_ARCH}-unknown-linux-gnu"
        ;;
    * )
        printf "Unknown platform detected!\nPlease make sure you have installed a valid Rust toolchain via rustup! Aborting.\n"
        exit 1
esac

echo "Building for platform ${DEFAULT_PLATFORM}, TARGET_ARCH=${TARGET_ARCH}, GN_ARCH=${GN_ARCH}, CARGO_TARGET=${CARGO_TARGET}", OUTPUT_DIR=${OUTPUT_DIR}

export MACOSX_DEPLOYMENT_TARGET="10.13"

# Build WebRTC.
if [ "${BUILD_WHAT}" = "all" ] || [ "${BUILD_WHAT}" = "webrtc" ]
then
    echo "Building WebRTC for ${GN_ARCH}"

    WEBRTC_ARGS="target_cpu=\"${GN_ARCH}\" rtc_build_examples=false rtc_build_tools=false rtc_include_tests=false rtc_enable_protobuf=false rtc_use_x11=false rtc_enable_sctp=false rtc_libvpx_build_vp9=true rtc_include_ilbc=false rtc_disable_metrics=true rtc_disable_trace_events=true"

    if [ "${BUILD_TYPE}" = "release" ]
    then
        WEBRTC_ARGS="${WEBRTC_ARGS} is_debug=false symbol_level=1"
    fi


(
    cd src/webrtc/src
    WEBRTC_ARGS="target_cpu=\"${GN_ARCH}\" rtc_build_examples=false rtc_build_tools=false rtc_include_tests=false rtc_enable_protobuf=false rtc_use_x11=false rtc_enable_sctp=false rtc_libvpx_build_vp9=true rtc_include_ilbc=false"

    if [ "${BUILD_TYPE}" = "debug" ]
    then
        gn gen -C "${OUTPUT_DIR}"/debug "--args=${WEBRTC_ARGS}"
        ninja -C "${OUTPUT_DIR}"/debug
    else
        gn gen -C "${OUTPUT_DIR}"/release "--args=${WEBRTC_ARGS} is_debug=false"
        ninja -C "${OUTPUT_DIR}"/release
        tools_webrtc/libs/generate_licenses.py --target :webrtc "${OUTPUT_DIR}/${BUILD_TYPE}" "${OUTPUT_DIR}/${BUILD_TYPE}"
    fi
    if [ -n "${ARCHIVE_WEBRTC}" ]
    then
        STATIC_LIB_PATH="${BUILD_TYPE}"/obj/webrtc.lib
        if [ ! -e "${OUTPUT_DIR}/${STATIC_LIB_PATH}" ]; then
            STATIC_LIB_PATH="${BUILD_TYPE}"/obj/libwebrtc.a
        fi
        tar -c --auto-compress --dereference -f "${OUTPUT_DIR}"/webrtc-"${WEBRTC_VERSION}"-"${HOST_PLATFORM}"-"${TARGET_ARCH}"-${BUILD_TYPE}.tar.bz2 -C "${OUTPUT_DIR}" "${STATIC_LIB_PATH}" "${BUILD_TYPE}/LICENSE.md"
    fi

    echo "Build WebRTC done"
)
fi

# Build and link the final RingRTC library.
(
    cd src/rust

    echo "Build final RingRTC"
    if [ "${BUILD_TYPE}" = "debug" ]
    then
        RUSTFLAGS="${RUSTFLAGS_WIN}" OUTPUT_DIR="${OUTPUT_DIR}" cargo build --target ${CARGO_TARGET} --features java
    else
        #OUTPUT_DIR="${OUTPUT_DIR}" cargo build --target ${CARGO_TARGET} --lib --features java --release
        RUSTFLAGS="${RUSTFLAGS}" OUTPUT_DIR="${OUTPUT_DIR}" cargo rustc --package ringrtc --target ${CARGO_TARGET} --features java --release --crate-type cdylib
    fi
    echo "Build final RingRTC done"

    mkdir -p ../java/tring/src/main/resources
    if [ $DEFAULT_PLATFORM = "darwin" ]
    then
        mkdir -p ../java/build/darwin
        cp -f ../../target/${CARGO_TARGET}/${BUILD_TYPE}/libringrtc.dylib ../java/tring/src/main/resources/libringrtc.dylib
        # cp -f target/${CARGO_TARGET}/${BUILD_TYPE}/libringrtc.dylib ../java/build/darwin/libringrtc-"${TARGET_ARCH}"
        ${JEXTRACT}/bin/jextract -I${JDK}include -I${JDK}/include/darwin -I${MACOS_SDK_PATH}/usr/include --output ../java/tring/src/gen-sources/java -t io.privacyresearch.tring tringlib.h
    elif [ $DEFAULT_PLATFORM = "win32" ]
    then
        mkdir -p ../java/build/win32
        cp -f ../../target/${CARGO_TARGET}/${BUILD_TYPE}/ringrtc.dll ../java/build/win32/libringrtc-"${TARGET_ARCH}".java
        ${JEXTRACT}/bin/jextract -I${JDK}include -I${JDK}/include/win32 --output ../java/tring/src/main/java -t io.privacyresearch.tring tringlib.h
    elif [ $DEFAULT_PLATFORM = "linux" ]
    then
        mkdir -p ../java/build/linux
        cp -f ../../target/${CARGO_TARGET}/${BUILD_TYPE}/libringrtc.so ../java/tring/src/main/resources/libringrtc.so
        #cp -f target/${CARGO_TARGET}/${BUILD_TYPE}/libringrtc.so ../java/build/linux/libringrtc-"${TARGET_ARCH}".java
        ${JEXTRACT}/bin/jextract -I${JDK}include -I${JDK}/include/linux --output ../java/tring/src/main/java -t io.privacyresearch.tring tringlib.h
    fi
    cd ../java/tringapi
    mvn clean install
    cd ../tring
    echo "mvn -Dclassifier=$DEFAULT_PLATFORM-$CARGO_ARCH clean install"
    mvn -Dclassifier=$DEFAULT_PLATFORM-$CARGO_ARCH clean install
)
